{% extends "base.rs.jinja" %}
{%- macro draw_conversion(from, to, to_func) -%}
impl {{- self.generic_lifetimes() }} From<{{from}}{{- self.generic_lifetimes() -}}> for {{to}}{{- self.generic_lifetimes() -}} {
    fn from(value: {{from}}{{- self.generic_lifetimes() -}}) -> Self {
        {{type_name}}Abi::{{to_func}}(value)
    }
}
{%- endmacro -%}

{%- block type_def -%}
pub struct {{type_name -}}

{{- self.generic_lifetimes() -}}

{%- if fields.len() > 0 %} {
    {%- for f in fields %}
    {% if !is_out -%} pub {% endif -%} {{f.name}}: {{f.type_info.render(lifetime_env)}},
    {%- endfor %}
} {%- else -%};{%- endif %}

#[repr(C)]
{# Option<> and DiplomatStrSlice are two types that we don't want to expose to the user, so we create an ABI type for conversion: -#}
pub(crate) struct {{ type_name }}Abi {{- self.generic_lifetimes() -}} {%- if fields.len() > 0 %} {
    {%- for f in fields %}
    {{f.name}} : {{f.type_info.render_with_override(lifetime_env, f.abi_info)}},
    {%- endfor %}
} {%- else -%};{%- endif %}

impl {{- self.generic_lifetimes() }} {{type_name}}Abi {{- self.generic_lifetimes() }} {
    pub(crate) fn from_ffi(self) -> {{type_name}}{{- self.generic_lifetimes() }} {
        {{type_name}} {
            {% for f in fields %}
            {{f.name}}: {{f.wrap_convert()}},
            {% endfor %}
        }
    }

    pub(crate) fn to_ffi({%- if fields.len() == 0 -%}_{%- endif -%} this : {{type_name}}{{- self.generic_lifetimes() -}}) -> {{type_name}}Abi{{- self.generic_lifetimes() }} {
        {{type_name}}Abi {
            {% for f in fields %}
            {{f.name}} : {{f.wrap_c_convert()}},
            {% endfor %}
        }
    }
}

{%- let abi_name = format!("{}Abi", self.type_name) %}

{% call draw_conversion(type_name, abi_name, "to_ffi") %}

{% call draw_conversion(abi_name, type_name, "from_ffi") %}

{%- endblock -%}

{%- block extra_impl -%}
{%- if is_out %}
{% for f in fields %}
    pub fn get_{{f.name}}(&self) -> &{{f.type_info.render(lifetime_env)}} {
        &self.{{f.name}}
    }
{% endfor %}
{% endif -%}
{%- endblock -%}